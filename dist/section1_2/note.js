/* 섹션 0 ~ 2.
## 타입스크립트 = 자바스크립트의 확장판

- 자바스크립트에 타입을 더 안전하게 사용할 수 있는 기능을 추가한 것.

## 타입 시스템

- 아주 여러가지 값들을 어떤 기준으로 묶어서 타입으로 정할지 결정하고 또 코드의 타입을 언제 검사할지 그리고 어떻게 검사할지 등의 우리가 프로그래밍 언어를 사용할때 타입과 관련해서 지켜야 하는 규칙들을 모아둔 체계
- 정적 타입 시스템: C, Java
- 동적 타입 시스템 : Python, JavaScript

## 타입스크립트의 동작 원리

## 컴파일러 옵션

### include

tsc에게 컴파일 할 타입스크립트 파일의 범위와 위치를 알려주는 옵션

### target

컴파일 결과 생성되는 자바스크립트 코드의 버전을 설정하는 target 옵션

### module

변환되는 자바스크립트 코드의 모듈 시스템을 설정하는 module 옵션

### outDir

컴파일 결과 생성할 자바스크립트 코드의 위치를 결정하는 outDir 옵션

### strict

타입스크립트 컴파일러의 타입 검사 엄격함 수준을 정하는 strict 옵션

### **ModuleDetection**

모듈 시스템 키워드(export, import)를 최소 하나 이상 사용해 해당 파일을 전역 모듈이 아닌 로컬(독립) 모듈로 취급되도록 만들어야 하는데 이를 자동화 하는 옵션

## **기본 타입**


## **원시 타입과 리터럴 타입**

### 원시 타입

동시에 한개의 값만 저장할 수 있는 타입들

number, string, boolean 등의 원시 타입은 숫자면 숫자, 문자열이면 문자열 딱 하나의 값만 저장할 수 있습니다.

### number

### string

### boolean

### null

### undefined

### 리터럴 타입

하나의 값만 포함하도록 값 자체로 만들어진 타입

###

## 배열과 튜플

## 객체

### object 정의

타입스크립트의 object 타입은 단순 값이 객체임을 표현하는 것 외에는 아무런 정보도 제공하지 않는 타입 → 오류 발생

### **객체 리터럴 타입**

중괄호를 열고 객체가 갖는 프로퍼티를 직접 나열해 만드는 타입

### 선택적 프로퍼티 : ?

### 읽기전용 프로퍼티 : readonly

## 타입 별칭과 인덱스 시그니처

### 타입별칭

동일한 스코프에 동일한 이름의 타입 별칭을 선언하는 것은 불가능

스코프가 다르다면 다음과 같이 중복된 이름으로 여러개의 별칭을 선언해도 상관 없음.

### 인덱스 시그니처

서로 호환되지 않는 타입으로 설정하면 오류가 발생

## 열거형 타입

열거형은 다음과 같이 여러개의 값을 나열하는 용도

안전하고 직관적으로 관리할 수 있음.

자동 할당되는 값은 기본적으로 0부터 시작

enum은 컴파일 결과 객체가 된다.

# **any와 unknown**

### any 타입

any 타입은 어떠한 타입 검사도 받지 않기 때문에 아무 타입의 값이나 범용적으로 담아 사용할 수 있고 또 다양한 타입의 메서드도 마음대로 호출해서 사용해도 문제가 되지 않습니다.

any는 최대한 사용하지 마세요

### **Unknown 타입**

unknown 타입의 값은 어떤 타입의 변수에도 저장할 수 없습니다.

어떤 연산에도 참여할 수 없으며, 어떤 메서드도 사용할 수 없습니다.

# **void와 never**

### void

아무런 값도 없음

오류 발생을 의미함.

void 타입의 변수에는 undefiend 이외의 다른 타입의 값은 담을 수 없습니다. 그 이유는 void 타입이 undefiend 타입을 포함하는 타입이기 때문

null 검사(strictNullChecks) 옵션을 해제(False)로 설정하면 특별히 이때에는 void 타입의 변수에 null 값도 담을 수 있게 됩니다.


### never

불가능을 의미하는 타입, 어떠한 값도 반환할 수 없는 상황일 때

never로 정의하면 any를 포함해 그 어떠한 타입의 값도 이 변수에 담을 수 없게 됩니다. */
export {};
// 섹션 3. 타입스크립트 이해하기
/* 타입스크립트는 집합이다.
동일한 속성, 특징들을 갖는 값
number Type
number Literal Type
슈퍼타입 - 부모타입
서브타입 - 자식타입
타입 호환성 : 어떤 타입을 다른 타입으로 취급해도 괜찮은지 판단하는 것
number Literal Type -> number Type : 업 캐스팅
number Type -> number Literal Type : 다운 캐스팅
 */
